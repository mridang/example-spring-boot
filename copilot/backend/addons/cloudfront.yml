Parameters:
    App:
        Type: String
        Description: Your application's name.
    Env:
        Type: String
        Description: The environment name your service, job, or workflow is being deployed to.
    Name:
        Type: String
        Description: The name of the service, job, or workflow being deployed.

    LambdaFunctionVersion:
        Description: AWS Lambda@Edge function version.
        Type: String
        Default: "1"

Resources:
    myDistribution:
        Type: 'AWS::CloudFront::Distribution'
        Metadata:
            'aws:copilot:description': 'Cloudfront Distribution'
        Properties:
            DistributionConfig:
                Origins:
                    - DomainName:
                          Fn::ImportValue:
                            !Sub "${App}-${Env}-PublicLoadBalancerDNS"
                      Id: myCustomOrigin
                      CustomOriginConfig:
                          HTTPPort: 80
                          OriginProtocolPolicy: http-only
                Enabled: true
                Comment: !Sub "{$App}-${Env}-${Name}"
                DefaultCacheBehavior:
                    TargetOriginId: myCustomOrigin
                    ViewerProtocolPolicy: allow-all
                    ForwardedValues:
                        QueryString: false
                        Cookies:
                            Forward: all
                ViewerCertificate:
                    CloudFrontDefaultCertificate: true
#                Headers:
#                    - 'CloudFront-Viewer-Country-Name'
#                    - 'CloudFront-Viewer-City'
#                    - 'CloudFront-Viewer-Latitude'
#                    - 'CloudFront-Viewer-Longitude'
#                    - 'CloudFront-Is-SmartTV-Viewer'
#                    - 'CloudFront-Is-Tablet-Viewer'
#                    - 'CloudFront-Is-Mobile-Viewer'
#                    - 'CloudFront-Is-Desktop-Viewer'

    # IAM ROLE USED FOR LAMBDA EDGE
    LambdaEdgeIAMRole:
        Type: 'AWS::IAM::Role'
        Description: "Lambda Edge IAM Role"
        Properties:
            RoleName: !Sub "${App}-iam-lambda-edge-role-${Env}"
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -   Sid: AllowLambdaServiceToAssumeRole
                        Effect: Allow
                        Principal:
                            Service:
                                - edgelambda.amazonaws.com
                                - lambda.amazonaws.com
                        Action:
                            - sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
            Path: /
            Policies:
                -   PolicyName: PublishNewLambdaEdgeVersion
                    PolicyDocument:
                        Version: 2012-10-17
                        Statement:
                            -   Effect: Allow
                                Action:
                                    - lambda:PublishVersion
                                Resource: '*'

    # LAMBDA@EDGE FUNCTION
    LambdaEdgeFunction:
        Type: 'AWS::Lambda::Function'
        Properties:
            Description: !Sub 'A custom Lambda@Edge function for serving custom headers from CloudFront Distribution'
            FunctionName: !Sub '${App}-lambda-edge-${Env}'
            Handler: index.handler
            Role: !GetAtt 'LambdaEdgeIAMRole.Arn'
            MemorySize: 128
            Timeout: 5
            Code:
                ZipFile: !Sub |
                    'use strict';
                     exports.handler = (event, context, callback) => {
                        console.log('Adding additional headers to CloudFront response.');
                        const response = event.Records[0].cf.response;
                        response.headers['strict-transport-security'] = [{
                        key: 'Strict-Transport-Security',
                        value: 'max-age=86400; includeSubdomains; preload',
                        }];
                        response.headers['x-content-type-options'] = [{
                        key: 'X-Content-Type-Options',
                        value: 'nosniff',
                        }];
                        response.headers['x-frame-options'] = [{
                            key:   'X-Frame-Options',
                            value: "DENY"
                        }];
                        response.headers['content-security-policy'] = [{
                            key:   'Content-Security-Policy',
                            value: "default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'"
                        }];
                        response.headers['x-xss-protection'] = [{
                            key:   'X-XSS-Protection',
                            value: "1; mode=block"
                        }];
                        response.headers['referrer-policy'] = [{
                            key:   'Referrer-Policy',
                            value: "same-origin"
                        }];
                        callback(null, response);
                      };
            Runtime: nodejs10.x

    # LAMBDA@EDGE VERSION VERSION
    LambdaEdgeVersion:
        Type: 'Custom::LambdaVersion'
        Properties:
            ServiceToken: !GetAtt 'LambdaEdgeVersionFunction.Arn'
            FunctionName: !Ref 'LambdaEdgeFunction'
            LambdaCodeVersion: !Ref 'LambdaFunctionVersion'

    # LAMBDA@EDGE VERSION FUNCTION
    LambdaEdgeVersionFunction:
        Type: 'AWS::Lambda::Function'
        Properties:
            Description: !Sub 'A custom Lambda@Edge Version function'
            FunctionName: !Sub '${App}-lambda-edge-version-${Env}'
            Handler: index.handler
            Role: !GetAtt 'LambdaEdgeIAMRole.Arn'
            MemorySize: 128
            Timeout: 30
            Code:
                ZipFile: !Sub |
                    var AWS = require('aws-sdk');
                    var response = require('cfn-response');
                    exports.handler = (event, context) => {
                      console.log("Request received:\n", JSON.stringify(event));
                      if (event.RequestType == 'Delete') {
                        return response.send(event, context, response.SUCCESS);
                      }
                      var lambda = new AWS.Lambda();
                      lambda.publishVersion({FunctionName: event.ResourceProperties.FunctionName}).promise().then((data) => {
                        return response.send(event, context, response.SUCCESS, {Version: data.Version}, data.FunctionArn);
                      }).catch((e) => {
                        return response.send(event, context, response.FAILED, e);
                      });
                    };
            Runtime: nodejs10.x

Outputs:

    LambdaEdgeFunction:
        Description: "The Name of the Lambda@Edge Function"
        Value: !Sub 'LambdaEdgeFunction'
        Export:
            Name: !Sub '${App}-${Env}-lambda-edge-function-3'

    LambdaEdgeFunctionARN:
        Description: "The ARN of the Lambda@Edge Function"
        Value: !GetAtt 'LambdaEdgeFunction.Arn'
        Export:
            Name: !Sub '${App}-${Env}-lambda-edge-function-arn-3'

    LambdaEdgeVersion:
        Description: "Lambda@Edge Version Function"
        Value: !GetAtt 'LambdaEdgeVersion.Version'
